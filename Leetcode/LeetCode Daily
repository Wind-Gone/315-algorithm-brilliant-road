# LeetCode 91 解码方法

## Problem

一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

```
'A' -> 1
'B' -> 2
...
'Z' -> 26
```


要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：

- "AAJF" ，将消息分组为 (1 1 10 6)
- "KJF" ，将消息分组为 (11 10 6)

注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。

给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。

题目数据保证答案肯定是一个 32 位 的整数。

## Samples

示例 1：

```
输入：s = "12"
输出：2
解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
```


示例 2：

```
输入：s = "226"
输出：3
解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
```


示例 3：

```
输入：s = "0"
输出：0
解释：没有字符映射到以 0 开头的数字。
含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
```


示例 4：

```
输入：s = "06"
输出：0
解释："06" 不能映射到 "F" ，因为字符串含有前导 0（"6" 和 "06" 在映射中并不等价）。
```


提示：

- 1 <= s.length <= 100
- s 只包含数字，并且可能包含前导零。

## Tag

动态规划

## Solution

因为要解码的是二位数以下的数值，所以我们需要考虑字符串s的二位长子串，对每个字串循环判断就行。我们设dp表示的是解码的方法数，所以主要分了三种情况，第一种是含有前导零，直接返回0；第二种是最后一位是0，那么dp[i+1]=dp[i-1]；第三种情况均不为0，dp[i+1]=dp[i-1]+dp[i]。判断是否有0，我们可以转为int型判断，因为只有两位；也可以转为char数组判断。本题的边界条件需要特别注意。

## Code

```java
package 解码方法;

class Solution {
    public int numDecodings(String s) {
        if (s.length() == 0 || s.charAt(0) == '0')
            return 0;
        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 1; i < s.length(); i++) {
            if(s.charAt(i) == '0' && s.charAt(i - 1) != '1' &&s.charAt(i - 1) != '2'){
                return 0;
            }
            int x = Integer.parseInt(s.substring(i - 1, i + 1));
            if (x == 10 || x == 20) {
                dp[i + 1] = dp[i - 1];
            }
            else if (x > 10 && x <= 26) {
                dp[i + 1] = dp[i] + dp[i - 1];
            }
            else {
                dp[i + 1] = dp[i];
            }
        }
        return dp[s.length()];
    }
}
public class Main {
    public static void main(String[] args) {
        Solution a = new Solution();
        String s = "226";
        System.out.println(a.numDecodings(s));
    }
}
```

## Complexity

时间复杂度：O(n)

空间复杂度：O(n)
